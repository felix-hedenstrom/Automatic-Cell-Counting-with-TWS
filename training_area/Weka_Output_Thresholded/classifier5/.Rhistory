bipolar_1_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_1_M_300.Rds")
bipolar_2_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_2_M_300.Rds")
bipolar_3_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_3_M_300.Rds")
bipolar_4_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_4_M_300.Rds")
bipolar_6_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_6_M_300.Rds")
bipolar_7_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_7_M_300.Rds")
bipolar_8_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_8_M_300.Rds")
View(bipolar_1_M_300)
View(bipolar_3_M_300)
bipolar_9_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_9_M_300.Rds")
SCZ_20_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/SCZ_results/SCZ_20_M_300.Rds")
View(SCZ_20_M_300)
SCZ_19_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/SCZ_results/SCZ_19_M_300.Rds")
SCZ_13_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/SCZ_results/SCZ_13_M_300.Rds")
SCZ_10_M_300 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/SCZ_results/SCZ_10_M_300.Rds")
bipolar_1_M_10 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_1_M_10.Rds")
View(bipolar_1_M_10)
bipolar_2_M_10 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_2_M_10.Rds")
bipolar_4_M_10 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_4_M_10.Rds")
bipolar_3_M_10 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_3_M_10.Rds")
bipolar_19_M_10 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_19_M_10.Rds")
View(bipolar_19_M_10)
View(bipolar_19_M_10)
bipolar_16_M_10 <- readRDS("~/Chi_Hua_Lab/ClzTOP/results/bipolar_16_M_10.Rds")
load("~/Chi_Hua_Lab/ClzTOP/ClzTOP_analysis/ClzTOP-dataClz.Rdata")
### locate R library
path = "C:/Users/19099/Documents/R/my_R_library"  # UPDATE to your file path
.libPaths(path)
trainList <- list()
testList <- list()
### Figure out your wd to edit the below lines
getwd()
WDir = "C:/Users/19099/Documents/Chi_Hua_Lab/"     # UPDATE to your file path
setwd(WDir)
DDir = "C:/Users/19099/Documents/Chi_Hua_Lab/ClzTOP/"     # UPDATE to your file path
SCIZOPHRENIA = "schizophrenia"
BIPOLAR = "bipolar"
OTHER_P = "other psychosis"
### Load TOP and Clz data files
cat(paste0(format(Sys.time(),"%H:%M:%S")))
dataTOP = readRDS(paste0(DDir,'ClzTOP_analysis/ClzTOP-dataTOP.Rdata'))
dataClz = readRDS(paste0(DDir,'ClzTOP_analysis/ClzTOP-dataClz.Rdata'))
cat(paste0(format(Sys.time(),"%H:%M:%S")))
### Load subjects metadata file
aux = read.table(paste0(DDir,'Data/TOP-subs-metadata.csv'), header = T, sep='\t', na.strings = 'NA' )
# Choose only Bipolar subjects, make this not hard coded in the future
aux.do = c( which( aux$Diag_category == "bipolar I"), which( aux$Diag_category == "bipolar II"), which(aux$Diag_category == "bipolarNOS"))
category_do = BIPOLAR
sub.do = as.vector( aux[ aux.do, 1] )
aux = match( sub.do, dataTOP$FID )
dataTOP = dataTOP[ aux[!is.na(aux)], ]       # Remove all null values from dataTOP
cat(paste0(format(Sys.time(),"%H:%M:%S")))
#######  Split the data into training and testing for several random divisions
n=20   # specify the number of random divisions (use n=20 after debugging) (Should use n = 2 for debugging in my opinion, see if enviornment preserved between iterations)
for(i in 1:n)
View(dataTOP)
View(dataClz)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("SNPRelate")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("SNPRelate")
WDir = "C:/Users/19099/Documents/Chi_Hua_Lab/plink-1.07-dos"     # UPDATE to your file path
setwd(WDir)
DDir = WDir
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP.gds")
version
R --version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
install.packages("BiocManager")
### locate R library
path = "C:/Users/19099/Documents/R/my_R_library"  # UPDATE to your file path
.libPaths(path)
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(version = "3.12")
install.packages("BiocManager")
install.packages("BiocManager")
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP.gds")
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP.gds")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("SNPRelate")
ls
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP.gds")
BiocManager::install("SNPRelate")
BiocManager::install()
BiocManager::install()
install.packages("BiocManager")
R
BiocManager
BiocManager::available()
library(BiocManager)
library(Rserve)
Rserve()
library(BiocManager)
WDir = "C:/Users/19099/Documents/R/win-library/4.0"
setwd(WDir)
library(BiocManager)
pwd
path
WDir = "C:/Users/19099/Documents/R/win-library/4.0"
setwd(WDir)
library(BiocManager)
path
WDir = "C:/Users/19099/Documents/"
setwd(WDir)
library(BiocManager)
path
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP.gds")
BiocManager::available()
BiocManager::available()
BiocManager::install("SNPRelate")
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP_samples.gds")
snpgdsBED2GDS(bed.fn = "ALL_TOP_samples.bed",
bim.fn = "ALL_TOP_samples.bim",
fam.fn = "ALL_TOP_samples.fam",
out.gdsfn = "ALL_TOP_samples.gds")
snpds
browseVignettes("SNPRelate")
WDir = "C:/Users/19099/Documents/Chi_Hua_Lab/plink-1.07-dos"     # UPDATE to your file path
library(SNPRelate)
library(SNPRelate)
load("~/Chi_Hua_Lab/ALL_TOP_GENODATA.Rdata")
load("~/Chi_Hua_Lab/plink-1.07-dos/gds_workspace_with_CLZ_data.RData")
1+2
2+2
source('~/.active-rstudio-document')
v = c(0, first, pi)
v
class(v)
pres = c("George", "Washington")
class(pres)
m = matrix(c(1,2,3,4,5,6), nrow=2, ncol=3)
m
colName = c(1,2,3)
v = c(TRUE,FALSE,TRUE)
age = c(10,20,30)
disney = data.frame(colName, v, age)
View(disney)
rowName = c(15,21,32)
v = c(TRUE,FALSE,TRUE)
age = c(10,20,30)
disney = data.frame(rowName, v, age)
fib = c(1,1,2,3,5,8,13,21,34,55)
fib
fib = c(0,1,1,2,3,5,8,13,21,34)
fib
library(EnhancedVolcano)
library(readxl)
RNAseq_of_whole_blood_in_MS_patients <- read_excel("Kaul_Lab/INFB_Project/RNAseq of whole blood in MS patients.xlsx")
View(RNAseq_of_whole_blood_in_MS_patients)
library(readxl)
RNAseq_PBMC_in_IFNB_treated_MS_Patients <- read_excel("Kaul_Lab/INFB_Project/RNAseq PBMC in IFNB treated MS Patients.xlsx")
View(RNAseq_PBMC_in_IFNB_treated_MS_Patients)
install.packages("https://cran.r-project.org/src/contrib/rlang_0.4.10.tar.gz", repos = NULL, type="source")
library(readr)
Ephrin_Genes <- read_csv("Kaul_Lab/INFB_Project/Ephrin_Genes.csv")
View(Ephrin_Genes)
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
length(u_img)
length(in_dir_list)
u_img
in_dir_list
big_df$img_ID
id1_df_sep
newsid1
id1_df_sep
newsid1
id1
file_names
###
# Method: trim_names
# Input: file names
# Output: bisected file names based on split
# Description:useful if information in automatic file name from microscope is repetitive
###
trim_names <- function(file_names, split = " - ", half = "front"){
id1 <- file_names
sid1 <- strsplit(id1, split)
newsid1 <- NA
for (i in 1:length(sid1)){
if(half == "front") {newsid1 <- c(newsid1, tail(sid1[[i]],1))}
else if(half == "back") { newsid1 <- c(newsid1, head(sid1[[i]],1))}
else{print("half = front or back, please")
break}
}
newsid1 <- newsid1[-1]
}
###
# Method: Sep_slidebook
# Input: file names containng all relevant image info (animal #, slice #, field #)
# Output: data frame with each type of info as it own column
# Description: parses out individual grouping variables
###
sep_slidebook <- function(x, sep = "-"){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent name elements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 3)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(id1_df)
}
###
# Method: squish
# Input: data from of grouping variables
# Output: list of unique image IDs contining specific grouping information
# Description: creates one grouping object for each image that can be compared across other iterations of the images with slightly different file names
###
squish <- function(input_df){
id1_df_squish <- NA
for (i in 1:dim(input_df)[1]) {
id1_df_squish[i] <- paste0(input_df[i,], sep = "_", collapse = "")
}
return(id1_df_squish)
}##simple function to combine rows of the df with info
#BiocManager::install("EBImage")
library("EBImage")
#install.packages("OpenImageR") ##dotn know if one or both is neccesary yet
library("OpenImageR")
###all the file locations
id_for_in_dir <-"C:/Users/19099/Documents/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/tyler_test_area/Weka_Output_Thresholded/"
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
u_img
id1
newsid1
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
newsid1
newsid1 <- trim_names(id1, half="back")
newsid1
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
id1_df_squish
u_img
length(u_img)
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
getwd()
# Input the genotype data as .csv file
geno_file <- read.csv("/genotype.csv")
getwd()
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
# Input the genotype data as .csv file
geno_file <- read.csv("C:/Users/19099/Documents/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/tyler_test_area/genotype.csv")
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
getwd()
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
length(class_list)
length(img_names)
dftc
current_img_plus_png
current_img
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
current_img_plus_png
dftc
dftc
if (dim(dftc)[1] == 0){
#here is where we handle empty images
name <- img_names[i]
tp = 0
fp = 0
fn = as.numeric(hand_final$count_h[i])
this_row <- cbind(name,tp, fp, fn)
} else {
fp = 0
tp = 0
fn = 0
for (j in 1:length(dftc$points)) {
if (dftc$points[j] == 0) {
fp = fp +1
} #auto count objects with no hand markers
else if (dftc$points[j] == 1) {
tp = tp +1
} #auto count objects with exactly 1 marker
else {
tp = tp+1 #adds one tp and requisite number of fn for objects with multiple markers
fn = fn + dftc$points[j] - 1
}
}
#for each image add total number hand count - sum(dftc$points), the sum points must always be less than hand_final$count
## dtfc$points only counts the markers that fall within cell objects, hand_final$counts is the sum of all points in total.
#when this is not true(eg there are negative values) check the image names of the hand count!!
missed <- as.numeric(hand_final$count_h[i]) - sum(dftc$points)
fn <- fn + missed
name <- img_names[i]
this_row <- cbind(name, tp, fp, fn)
} #this is the closing bracket for if there were no cell objects so dftc is empty
final_blah
this_row
fn
missed
missed <- as.numeric(hand_final$count_h[i]) - sum(dftc$points)
missed
fn = fn + dftc$points[j] - 1
fn
dftc$points[j]
fn = as.numeric(hand_final$count_h[i])
fn
hand_final$count_h[i]
hand_final
hand_final$count_h
i
hand_final$count_h[8]
length(img_names)
img_names
files
path
list.files(path =  folder_loc, pattern = "\\.png$")
folder_loc
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/Project N images by ID.R')
source('~/Kaul_Lab/AutoCellCount/Automatic-Cell-counting-with-TWS/scripts_for_auto_cell_count/classifier_comparison.R')
f
class_res_loc
class_results
class
