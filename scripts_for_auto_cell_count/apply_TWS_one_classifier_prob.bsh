/*
 * Author: Tyler Jang, Theo 
 * Date: 3/3/2022
 * 
 * Input: Classifiers to apply, images to process
 * Output: Images after being classified with probability maps
 * Description: This macro applies a selected Weka classifier onto each image.
 */
#@ File(label="Source directory", description="Select the directory with the source of the scripts", style="directory") srcDir
#@ File(label="Weka model", description="Select the Weka model to apply") modelPath
#@ Float (label="Set cutoff[0,1], default = 0.5", description="Choose a cutoff from ACCT1 or leave as default 0.5",value=0.5) cutoff

// Number of tiles per image
xTiles = 3;
yTiles = 3;
zTiles = 0;

import trainableSegmentation.WekaSegmentation;
import trainableSegmentation.utils.Utils;
import ij.io.FileSaver;
import ij.IJ;
import ij.ImagePlus;

modelName = modelPath.getName().replaceFirst("[.][^.]+$", "");

// Set the working directory to the directory with the script
bsh.cwd = srcDir;

// Directory containing full set of images
inputDir = bsh.cwd + "/../testing_area/images/";

// Directories to output the probability map and labeled images
outputDir = bsh.cwd + "/../testing_area/Weka_Output/" + modelName + "/";
outputprobDir = bsh.cwd + "/../testing_area/Weka_Probability/" + modelName + "/";

// Starting time
startTime = System.currentTimeMillis();
  
// Create segmentator
segmentator = new WekaSegmentation(zTiles > 0);

// Load chosen classifier
segmentator.loadClassifier(modelPath.getCanonicalPath());
  
// Get list of input images
listOfFiles = pathToFile(inputDir).listFiles();

for (i = 0; i < listOfFiles.length; i++) {
    // process only files (do not go into sub-folders)
    if(listOfFiles[i].isFile()) {
        // try to read file as image
        image = IJ.openImage(listOfFiles[i].getCanonicalPath());
        if(image != null) {
        	// Ensure the image is in 8-bit format for grey scaling
	        IJ.run(image, "8-bit", "");
            
            tilesPerDim = new int[2];
            if(image.getNSlices() > 1) {
                tilesPerDim = new int[3];
                tilesPerDim[2] = zTiles;
            }
            tilesPerDim[0] = xTiles;
            tilesPerDim[1] = yTiles;
            
            // Apply classifier and get results (0 indicates number of threads is auto-detected)
            result = segmentator.applyClassifier(image, tilesPerDim, 0, true);
            
            // Save result as TIFF in output folder
            outputFileName = listOfFiles[i].getName().replaceFirst("[.][^.]+$", "") + ".tif";
            
            // Removes the non-cell pixel probablility, which is obligate inverse of the cell prob.
            IJ.run(result, "Slice Remover", "first=2 last=2 increment=2");

            new FileSaver(result).saveAsTiff(pathToFile(outputprobDir) + File.separator + outputFileName);

			// Thresholding the probaility image just like the imageJ GUI. (only works with 2 classes eg. cell & non-cell)
			IJ.setThreshold(result, 0, cutoff);
			IJ.run(result, "Convert to Mask", "");

			new FileSaver(result).saveAsTiff(pathToFile(outputDir) + File.separator + outputFileName);
  
            // Force garbage collection (important for large images)
            result = null; 
            image = null;
            System.gc();
        }
    }
}
// Print elapsed time
estimatedTime = System.currentTimeMillis() - startTime;
IJ.log( "** Finished processing folder in " + estimatedTime + " ms **" );
System.gc();