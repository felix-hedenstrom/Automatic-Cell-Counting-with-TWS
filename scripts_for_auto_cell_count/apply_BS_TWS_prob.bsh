/*
 * Author: Tyler Jang, Theo 
 * Date: 3/3/2022
 * 
 * Input: Classifiers to apply, images to process
 * Output: Images after being classified with probability maps
 * Description: This macro applies each Weka classifier onto each validated training image.
 */
// The user will have to select the directory that contains the script they are running.
#@ File(label="Source directory", description="Select the directory with the source of the scripts", style="directory") srcDir
#@ Float (label="Set cutoff[0,1], default = 0.5", description="Choose a cutoff from ACCT2 or leave as default 0.5",value=0.5) cutoff

// Set the working directory to the directory with the script
bsh.cwd = srcDir;
inputDir = bsh.cwd + "/../training_area/Validation_data/";
outputDirs = bsh.cwd + "/../training_area/Weka_Output";
outputProbDirs = bsh.cwd + "/../training_area/Weka_Probability";
modelsDir = bsh.cwd + "/../training_area/Classifiers";

import trainableSegmentation.WekaSegmentation;
import trainableSegmentation.utils.Utils;
import ij.io.FileSaver;
import ij.IJ;
import ij.ImagePlus;
  
// Number of tiles per image
xTiles=3;
yTiles=3;
zTiles=0;

// Starting time
startTime = System.currentTimeMillis();
  
// Iterate through classifiers
listOfMod = pathToFile(modelsDir).listFiles();

// Iterate through output folders
listOfOut = pathToFile(outputDirs).listFiles();
listOfprobOut = pathToFile(outputProbDirs).listFiles();

// Apply each classifier to each validation image
for ( z = 0; z < listOfMod.length; z++ ) {	
	modelPath = listOfMod[ z ];
	
	// Load the classifier
	segmentator = new WekaSegmentation( zTiles > 0 );
	segmentator.loadClassifier( modelPath.getCanonicalPath() );
	  
	// Get list of input images
	listOfFiles = pathToFile(inputDir).listFiles();

	// For each image
	for ( i = 0; i < listOfFiles.length; i++ ) {
	    // Process only files (do not go into sub-folders)
	    if( listOfFiles[ i ].isFile() ) {
	        // Try to read file as image
	        image = IJ.openImage( listOfFiles[i].getCanonicalPath() );
	        if( image != null ) {
	        	// Ensure the image is in 8-bit format for grey scaling
	        	IJ.run(image, "8-bit", "");
	        	
	            tilesPerDim = new int[ 2 ];
	            if( image.getNSlices() > 1 ) {
	                tilesPerDim = new int[ 3 ];
	                tilesPerDim[ 2 ] = zTiles;
	            }
	            tilesPerDim[ 0 ] = xTiles;
	            tilesPerDim[ 1 ] = yTiles;
	            
	            // Apply classifier and get results (0 indicates number of threads is auto-detected)
	            result = segmentator.applyClassifier(image, tilesPerDim, 0, true);
	
	            if( !getProbs ) {
	                // Assign same LUT as in GUI
	                result.setLut( Utils.getGoldenAngleLUT() );
	            }	             
	            
	            // Removes the non-cell pixel probablility, which is obligate inverse of the cell prob.
            	IJ.run(result, "Slice Remover", "first=2 last=2 increment=2");

	            // Save result as TIFF in output folder
	            outputFileName = listOfFiles[ i ].getName().replaceFirst("[.][^.]+$", "") + ".tif";
	            print(listOfprobOut[ z ].getPath());
	            print(outputFileName);
	            new FileSaver( result ).saveAsTiff( listOfprobOut[ z ].getPath() + File.separator + outputFileName );

	            // Thresholding the probaility image just like the imageJ GUI. (only works with 2 classes eg. cell & non-cell)
				IJ.setThreshold(result, 0, cutoff);
				IJ.run(result, "Convert to Mask", "");

	  		
				// Save resulting probability map in its output folder 
				print(listOfOut[ z ].getPath());
				print(outputFileName);
				new FileSaver( result ).saveAsTiff( listOfOut[ z ].getPath() + File.separator + outputFileName);
  
	            // force garbage collection (important for large images)
	            result = null; 
	            image = null;
	            System.gc();
	        }
	    }
	}
	segmentator = null;
	System.gc();
}
// Print elapsed time
estimatedTime = System.currentTimeMillis() - startTime;
IJ.log( "** Finished processing folders in " + estimatedTime + " ms **" );
System.gc();