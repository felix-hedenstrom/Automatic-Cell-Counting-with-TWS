trim_names <- function(file_names, split = " - ", half = "front"){
id1 <- file_names
sid1 <- strsplit(id1, split)
newsid1 <- NA
for (i in 1:length(sid1)){
if(half == "front") {newsid1 <- c(newsid1, tail(sid1[[i]],1))}
else if(half == "back") { newsid1 <- c(newsid1, head(sid1[[i]],1))}
else{print("half = front or back, please")
break}
}
newsid1 <- newsid1[-1]
}
neun_trim <- trim_names(neun_dir, split = "_XY")
head(neun_trim)
neun_trim <- trim_names(neun_dir, split = "_XY", half = "back")
head(neun_trim)
neun_sep <- sep_slidebook(neun_dir)
head(neun_sep)
neun_trim <- trim_names(neun_dir, split = "_XY", half = "back")
neun_sep <- sep_slidebook(neun_dir, sep = c("_", " "))
head(neun_sep)
head(neun_trim)
head(neun_dir)
id1 = neun_dir
id1 <- file_names
sid1 <- strsplit(id1, split)
id1 <- file_names
id1 = neun_dir
sid1 <- strsplit(id1, split)
split = " - "
sid1 <- strsplit(id1, split)
sid1
split = ".crop."
sid1 <- strsplit(id1, split)
sid1
if(half == "front") {newsid1 <- c(newsid1, tail(sid1[[i]],1))}
half = "front"
if(half == "front") {newsid1 <- c(newsid1, tail(sid1[[i]],1))}
newsid1 <- NA
if(half == "front") {newsid1 <- c(newsid1, tail(sid1[[i]],1))}
for (i in 1:length(sid1)){
if(half == "front") {newsid1 <- c(newsid1, tail(sid1[[i]],1))}
else if(half == "back") { newsid1 <- c(newsid1, head(sid1[[i]],1))}
else{print("half = front or back, please")
break}
}
newsid1
trim_names <- function(file_names, split = " - ", half = "front"){
id1 <- file_names
sid1 <- strsplit(id1, split)
newsid1 <- NA
for (i in 1:length(sid1)){
if(half == "front") {newsid1 <- c(newsid1, head(sid1[[i]],1))}
else if(half == "back") { newsid1 <- c(newsid1, tail(sid1[[i]],1))}
else{print("half = front or back, please")
break}
}
newsid1 <- newsid1[-1]
}
neun_dir <- dir("F:/Deepika NeuN/nuen_only_male_cortex/")
head(neun_dir)
neun_trim <- trim_names(neun_dir, split = ".crop.", half = "back")
head(neun_trim)
neun_trim <- trim_names(neun_dir, split = ".crop.", half = "front")
head(neun_trim)
neun_sep <- sep_slidebook(neun_dir, sep = c("_", " "))
head(neun_sep)
neun_sep <- sep_slidebook(neun_dir, sep = c("_"))
head(neun_sep)
neun_sep <- sep_slidebook(neun_dir, sep = c("HPC","_"))
head(neun_sep)
neun_sep <- sep_slidebook(neun_dir, sep = c("HPC","_", " "))
head(neun_sep)
neun_sep <- sep_slidebook(neun_dir, sep = c( " "))
head(neun_sep)
x = neun_trim
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
sep = "-"
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,3)
sep_slidebook <- function(x, sep = c("-", "_")){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent nam eelements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 3)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(id1_df)
}
sep = c("-", "_")
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,3)
sep = c( "_", " ")
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,3)
head(newsid1,3)
head(newsid1_s,3)
sep = c( "_", "\\D+")
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,3)
head(newsid1,3)
head(newsid1_s,10)
x = as.character(neun_trim)
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,10)
sep = c(  "\\D+")
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,10)
head(newsid1_s,3)
head(newsid1,3)
sep = [:punct:]
sep = c(  "\d")
sep = c(  "\\d")
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,3)
sep = c(  "\\D+")
sep = c(  "\\D+")
newsid1_s <- strsplit(newsid1, sep)
head(newsid1_s,3)
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 4)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
max_l <- length(newsid1_s[[1]])
newsid1_snum
newsid1_snum <- parseit(x = newsid1_s, object_num = 5)
newsid1_snum
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
newsid1_fnum
newsid1_anum
sep_slidebook <- function(x, sep = c(  "\\D+"), ){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
head(newsid1,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent nam eelements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 5)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(id1_df)
}
neun_sep <- sep_slidebook(neun_dir)
head(neun_sep)
neun_sep <- sep_slidebook(neun_dir)
head(neun_sep)
neun_trim <- x
neun_sep <- sep_slidebook(neun_dir)
head(neun_sep)
newsid1_anum
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
id1_df
newsid1_fnum
neun_sep1 <- id1_df
WT <- "332","345","357"
GP <- "343","344","348"
WT <- c("332","345","357")
GP <- c("343","344","348")
a
a
a
a
WTGP <- c(WT,GP)
WTGP
newsid1_anum == WTGP
sum(newsid1_anum == WTGP)
sum(newsid1_anum == WT)
sum(newsid1_anum == GP)
sum(newsid1_anum == GP | newsid1_anum == WT)
newsid1_anum
setwd("F:/Deepika NeuN/nuen_only_male_cortex/")
length(neun_dir)
newsid1_anum == GP | newsid1_anum == WT
sum(newsid1_anum == GP | newsid1_anum == WT)
for (i in 1:length(neun_dir)){
if(newsid1_anum == GP | newsid1_anum == WT){file.copy(neun_dir, "F:/Deepika NeuN/neun_only_male_cortex_wtgp/", copy.date = T)}
else(print("nope"))
}
i = 5
newsid1_anum[i] == GP | newsid1_anum == WT
newsid1_anum[i] == GP | newsid1_anum[i] == WT
i
newsid1_anum[i]
newsid1_anum[i] == GP
newsid1_anum[i] == WT
for (i in 1:length(neun_dir)){
if(newsid1_anum[i] == GP | newsid1_anum[i] == WT){file.copy(neun_dir[i], "F:/Deepika NeuN/neun_only_male_cortex_wtgp/", copy.date = T)}
else(print("nope"))
}
sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT)
newsid1_anum[i] == GP
newsid1_anum[i] == GP | newsid1_anum[i] == WT
newsid1_anum[i] == GP
newsid1_anum[i] == WT
i = 3
sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT)
sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT) == 1
for (i in 1:length(neun_dir)){
if(sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT) == 1){file.copy(neun_dir[i], "F:/Deepika NeuN/neun_only_male_cortex_wtgp/", copy.date = T)}
else(print("nope"))
}
sum(newsid1_anum == GP | newsid1_anum == WT)
sum(newsid1_anum == GP | newsid1_anum == WT)
sum(newsid1_anum == GP | newsid1_anum == WT) == 1)
sum(sum(newsid1_anum == GP | newsid1_anum == WT) == 1)
sum(newsid1_anum == GP | newsid1_anum == WT)
newsid1_anum == WT
sum(newsid1_anum == WT)
sum(newsid1_anum == GP | newsid1_anum == WT)
sum(newsid1_anum == GP)
length(newsid1_anum)
legnth(neun_dir)
length(neun_dir)
sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT) == 1)
for(i in 1:length(neun_dir)){holder[i] <- sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT) )}
for(i in 1:length(neun_dir)){holder[i] <- sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT) }
holder <- NA
for(i in 1:length(neun_dir)){holder[i] <- sum(newsid1_anum[i] == GP | newsid1_anum[i] == WT) }
holder
sum(holder)
sum(newsid1_anum == WT)
sum(newsid1_anum == WT[1] | newsid1_anum == WT[2] | newsid1_anum == WT[3])
sum(newsid1_anum == WT)
sum(newsid1_anum == WT[1] | newsid1_anum == WT[2] | newsid1_anum == WT[3])
WT
newsid1_anum
sum(newsid1_anum == GP[1] | newsid1_anum == GP[2] | newsid1_anum == GP[3])
57+61
neun_wtgp <- dir("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/neun_only_male_cortex_wtgp/")
neun_wtgp_trim <- trim_names(neun_wtgp)
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
neun_wtgp_sep
sep_slidebook <- function(x, sep = c(  "\\D+"), ){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
head(newsid1,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent nam eelements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 5)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
#
# fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
#
#
#
# newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
# newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
# newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
#
#
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(newsid1_anum)
}
sep_slidebook <- function(x, sep = c(  "\\D+"), ){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
head(newsid1,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent nam eelements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 5)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
#
# fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
#
#
#
# newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
# newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
# newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
#
#
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(newsid1_anum)
}
sep_slidebook <- function(x, sep = "-"){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent nam eelements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 3)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(id1_df)
}
sep_slidebook <- function(x, sep = c(  "\\D+") ){
newsid1 <- x
newsid1_s <- strsplit(newsid1, sep)
#look at what elements you are working with
head(newsid1_s,3)
head(newsid1,3)
max_l <- length(newsid1_s[[1]])
##parseit takes a list of seperated relevent nam eelements from every image
parseit <-function(x,object_num){
newsid1_anum <- NA
for (i in 1:length(x)){
newsid1_anum <- c(newsid1_anum, x[[i]][object_num])
}
newsid1_anum <- newsid1_anum[-1]
}
###these are what you need to adjust for different names of images!!!!####
newsid1_anum <- parseit(x = newsid1_s, object_num = 2)
newsid1_snum <- parseit(x = newsid1_s, object_num = 5)
newsid1_fnum <- parseit(x = newsid1_s, object_num = max_l)
#
# fnumsid1_s <- strsplit(newsid1_fnum, "") #### sometimes another seperation step is required
#
#
#
# newsid1_fnum1 <- parseit(x = fnumsid1_s, object_num = 1)
# newsid1_fnum2 <- parseit(x = fnumsid1_s, object_num = 2)
# newsid1_fnum3 <- paste(newsid1_fnum1,newsid1_fnum2, sep = "") # for clarity, seperated objects can be recombined in order with paste()
#
#
####making the data frames-----------
id1_df <- cbind(newsid1_anum, newsid1_snum, newsid1_fnum3)
head(id1_df)
#return(id1_df_squish)
return(id1_df)
}
neun_dir
neun_sep <- sep_slidebook(neun_trim)
head(neun_sep)
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
neun_wtgp_trim
neun_wtgp_trim <- trim_names(neun_wtgp, split = ".crop.")
neun_wtgp_trim
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
neun_wtgp_sep
neun_wtgp <- dir("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/neun_only_male_cortex_wtgp/")
neun_wtgp_trim <- trim_names(neun_wtgp, split = ".crop.")
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
neun_wtgp_trim
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
neun_wtgp_sep
neun_WT <- neun_wtgp[neun_wtgp_sep[,1] %in% WT ] = "wt"
neun_WT <- NA
neun_WT <- neun_wtgp[neun_wtgp_sep[,1] %in% WT ] = "wt"
neun_WT <- NA
neun_wtgp_sep[,1] %in% WT
neun_WT <- NA
neun_WT <- geno2[neun_wtgp_sep[,1] %in% WT ]
neun_WT <- neun_wtgp[neun_wtgp_sep[,1] %in% WT ]
neun_WT
neun_wtgp_sep[,1]
wt_imgs <- neun_wtgp[neun_wtgp_sep[,1] %in% WT, ]
neun_wtgp_sep[,1]
WT
wt_imgs <- neun_wtgp[as.character(neun_wtgp_sep[,1]) %in% as.character(WT), ]
wt_imgs <- neun_wtgp[as.character(neun_wtgp_sep[,1]) %in% as.character(WT), ]
wt_imgs <- neun_wtgp[as.character(neun_wtgp_sep[,1]) %in% as.character(WT)]
dim(wt_imgs)
length(wt_imgs)
wt_imgs
length(complete.cases(wt_imgs))
length(complete.cases(wt_imgs))
length(na.omit(wt_imgs))
wt_imgs <- na.omit(wt_imgs)
gp_imgs <- neun_wtgp[neun_wtgp_sep[,1] %in% GP]
dim(gp_imgs)
gp_imgs
gp_imgs <- NA
gp_imgs <- neun_wtgp[neun_wtgp_sep[,1] %in% GP]
gp_imgs
length(gp_imgs)
gp_imgs <- na.omit(gp_imgs)
length(gp_imgs)
length(na.omit(wt_imgs))
chosenwt <- sample(wt_imgs, 5)
chosenwt
chosengp <- sample(gp_imgs, 5)
chosengp <- sample(gp_imgs, 5)
chosen <- c(chosenwt, chosengp)
chosen
neun_wtgp <- dir("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/processed images//")
neun_wtgp_trim <- trim_names(neun_wtgp, split = ".crop.")
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
neun_wtgp_sep
wt_imgs <- neun_wtgp[as.character(neun_wtgp_sep[,1]) %in% as.character(WT)]
length(wt_imgs)
length(na.omit(wt_imgs))
wt_imgs <- na.omit(wt_imgs)
gp_imgs <- NA
gp_imgs <- neun_wtgp[neun_wtgp_sep[,1] %in% GP]
length(gp_imgs)
gp_imgs <- na.omit(gp_imgs)
chosenwt <- sample(wt_imgs, 5)
chosengp <- sample(gp_imgs, 5)
chosen <- c(chosenwt, chosengp)
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/processed images/")
chosen
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/processed images/")
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/processed images/")
for (d in chosen){
file.copy(d, "F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/Validation_imgs/")
file.remove(d)
}
neun_wtgp <- dir("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/processed images/")
neun_wtgp_trim <- trim_names(neun_wtgp, split = ".crop.")
neun_wtgp_sep <- sep_slidebook(neun_wtgp_trim)
wt_imgs <- neun_wtgp[as.character(neun_wtgp_sep[,1]) %in% as.character(WT)]
length(wt_imgs)
length(na.omit(wt_imgs))
wt_imgs <- na.omit(wt_imgs)
gp_imgs <- NA
gp_imgs <- neun_wtgp[neun_wtgp_sep[,1] %in% GP]
length(gp_imgs)
gp_imgs <- na.omit(gp_imgs)
chosenwt <- sample(wt_imgs, 5)
chosengp <- sample(gp_imgs, 5)
chosen <- c(chosenwt, chosengp)
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/processed images/")
for (d in chosen){
file.copy(d, "F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Deepika_Neun/training images/")
file.remove(d)
}
