sum(datain_mo_wt$AR <= 1.5)
sum(datain_mo_gp$AR <= 1.5)
sum(datain_mo_wt$Circ. >= 0.9)
sum(datain_mo_gp$Circ. >= 0.9)
sum(datain_mo_wt$AR <= 1.5 & datain_mo_wt$Circ. >= 0.9)
sum(datain_mo_gp$AR <= 1.5 & datain_mo_gp$Circ. >= 0.9)
dim(datain_mo_wt)
dim(datain_mo_gp)
dim(datain_mo_gp)[1]
sum(datain_mo_wt$AR <= 1.5 & datain_mo_wt$Circ. >= 0.9)/dim(datain_mo_wt)[1]
sum(datain_mo_gp$AR <= 1.5 & datain_mo_gp$Circ. >= 0.9)/dim(datain_mo_gp)[1]
(datain_mo_gp$AR <= 1.5 & datain_mo_gp$Circ. >= 0.9)
datain_mo$iscircle <- as.factor(datain_mo_gp$AR <= 1.5 & datain_mo_gp$Circ. >= 0.9)
datain_mo$iscircle <- as.factor(datain_mo_gp$AR <= 1.5 & datain_mo_gp$Circ. >= 0.9)
as.factor(datain_mo$AR <= 1.5 & datain_mo$Circ. >= 0.9)
datain_mo$iscircle <- as.factor(datain_mo$AR <= 1.5 & datain_mo$Circ. >= 0.9)
chisq.test(datain_mo$iscircle ~ datain_mo$geno)
datain_mo$iscircle
datain_mo_wt <- datain_mo[datain_mo$geno == "wt",]
datain_mo_gp <- datain_mo[datain_mo$geno == "gp",]
chisq.test(datain_mo_wt$iscircle, datain_mo_gp$iscircle)
chisq.test(rbind(c(350, 2071), c(332, 2491)))
inputdir_all1 <-"F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/test_area/Weka_Output_Thresholded/"
inputdir_all <- dir(inputdir_all1)
id1 <- inputdir_all
newsid1 <- trim_names(id1)
id1_df_sep <- sep_slidebook(x = newsid1)
id1_df_squish <- squish(input_df = id1_df_sep)
###having to use a path not starting with Data for testing****
inputdir_all1 <-"F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/test_area/Weka_Output_Thresholded/"
inputdir_all <- dir(inputdir_all1)
id1 <- inputdir_all
newsid1 <- trim_names(id1)
id1_df_sep <- sep_slidebook(x = newsid1)
id1_df_squish <- squish(input_df = id1_df_sep)
big_df <- cbind(inputdir_all, id1_df_squish,id1_df_sep) ##specify: original file names, info columns, squished ID
colnames(big_df) <- c("file_name", "img_ID", "a_num","S_num", "F_num")
big_df <- data.frame(big_df) #this df gives us access to varibles based on the images in several forms
##now need to gather and project all items with matching img_ID
##need to be working in images directory???****
id_for_dir <- paste(ORIGIN, "/Weka_output_thresh/", sep = "")
length(class_list)
u_img <- unique(big_df$img_ID)
length(u_img)
dim(big_df)
big_df
big_df
newsid1
inputdir_all1 <-"F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/test_area/Weka_Output_Thresholded/classifier1/"
inputdir_all <- dir(inputdir_all1)
id1 <- inputdir_all
newsid1 <- trim_names(id1)
id1_df_sep <- sep_slidebook(x = newsid1)
id1_df_squish <- squish(input_df = id1_df_sep)
big_df <- cbind(inputdir_all, id1_df_squish,id1_df_sep) ##specify: original file names, info columns, squished ID
colnames(big_df) <- c("file_name", "img_ID", "a_num","S_num", "F_num")
big_df <- data.frame(big_df) #this df gives us access to varibles based on the images in several forms
id_for_dir <- paste(ORIGIN, "/Weka_output_thresh/", sep = "")
length(class_list)
u_img <- unique(big_df$img_ID)
id1_df_squish
u_img <- unique(big_df$img_ID)
length(u_img)
dim(big_df)
out_loc
OUTPUT_project
id_for_dir
id_for_dir <- paste(ORIGIN, "/Weka_output_thresh/", sep = "")
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/Data/")
inputdir_all1 <-"test_area//Weka_Output_Thresholded/classifier1/"
inputdir_all <- dir(inputdir_all1)
inputdir_all
inputdir_all1 <-"test_area/Weka_Output_Thresholded/classifier1/"
inputdir_all <- dir(inputdir_all1)
inputdir_all
dir(inputdir_all1)
getwd()
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/")
inputdir_all1 <-"test_area/Weka_Output_Thresholded/classifier1/"
inputdir_all <- dir(inputdir_all1)
inputdir_all
id1 <- inputdir_all
newsid1 <- trim_names(id1)
id1_df_sep <- sep_slidebook(x = newsid1)
id1_df_squish <- squish(input_df = id1_df_sep)
big_df <- cbind(inputdir_all, id1_df_squish,id1_df_sep) ##specify: original file names, info columns, squished ID
colnames(big_df) <- c("file_name", "img_ID", "a_num","S_num", "F_num")
big_df <- data.frame(big_df) #this df gives us access to varibles based on the images in several forms
id_for_dir <- paste(ORIGIN, "/Weka_output_thresh/", sep = "")
OUTPUT_project
u_img <- unique(big_df$img_ID)
length(u_img)
dim(big_df)
for (j in nums){
setwd(paste(id_for_dir,"/",nm,j, sep = ""))
getwd()
img_file_names <- list.files()
out_loc <- OUTPUT_project
for (i in 1: length(u_img)){
all_current_ID <- grep(u_img[i],big_df$img_ID)
this_group <- img_file_names[all_current_ID]
if (length(this_group) == 2){
datain1 <- readImage(as.character(this_group[1]))
datain2 <- readImage(as.character(this_group[2]))
projected <- datain1 + datain2
projected[projected >255] = 255
} else if (length(this_group) == 3){
datain1 <- readImage(as.character(this_group[1]))
datain2 <- readImage(as.character(this_group[2]))
datain3 <- readImage(as.character(this_group[3]))
projected <- datain1 + datain2 +datain3
projected[projected >255] = 255
}
##it turns out names get very long when working with image processing steps and you cant save a file with more than 97 charcters in the name
fn = this_group[1]
if (length(unlist(strsplit(this_group[1], split = ""))) >= 93){
fn <- paste(unlist(strsplit(this_group[1], split = ""))[1:93], sep = "", collapse = "")
#cant have 2 . in a row before png
if (tail(unlist(strsplit(fn,split = "")),1) == "."){
fn <- paste(unlist(strsplit(fn,split = ""))[1:length(unlist(strsplit(fn,split = ""))) - 1], sep = "", collapse = "")
}
}
file_out_loc <- paste(paste(out_loc,nm,j, sep = ""),"/",fn,".png", sep = "")
writeImage(projected,file_out_loc)
# }else (print("we have a problem, ", as.character(this_group[1])," had neither 2 nor 3 images"))
#
}
}
file_out_loc
id_for_dir
inputdir_all
inputdir_folders <- dir("test_area/Weka_Output_Thresholded/")
inputdir_all1 <- inputdir_folders[1]
inputdir_all <- dir(paste0(inputdir_folders,inputdir_all1))
inputdir_all
paste0(inputdir_folders,inputdir_all1)
inputdir_folders1 <- ("test_area/Weka_Output_Thresholded/")
inputdir_folders <- dir(inputdir_folders1)
inputdir_folders
inputdir_all <- dir(paste0(inputdir_folders1,inputdir_all1))
inputdir_all
id1 <- inputdir_all
newsid1 <- trim_names(id1)
id1_df_sep <- sep_slidebook(x = newsid1)
id1_df_squish <- squish(input_df = id1_df_sep)
big_df <- cbind(inputdir_all, id1_df_squish,id1_df_sep) ##specify: original file names, info columns, squished ID
colnames(big_df) <- c("file_name", "img_ID", "a_num","S_num", "F_num")
big_df <- data.frame(big_df) #this df gives us access to varibles based on the images in several forms
getwd()
id_for_dir <- "test_area/Weka_Output_Projected/"
id_for_dir <- "test_area/Weka_Output_Projected/"
u_img <- unique(big_df$img_ID)
length(u_img)
dim(big_df)
inputdir_folders
id_for_dir
id_for_dir <- "test_area/Weka_Output_Thresholded/"
u_img <- unique(big_df$img_ID)
length(u_img)
dim(big_df)
inputdir_folders
j = "classifier1"
setwd(paste(id_for_dir,"/",j, sep = ""))
getwd()
img_file_names <- list.files()
OUTPUT_project
out_loc <- "test_area/Weka_Output_Projected/"
i = 1
all_current_ID <- grep(u_img[i],big_df$img_ID)
this_group <- img_file_names[all_current_ID]
datain1 <- readImage(as.character(this_group[1]))
datain2 <- readImage(as.character(this_group[2]))
projected <- datain1 + datain2
projected[projected >255] = 255
datain1 <- readImage(as.character(this_group[1]))
as.character(this_group[1])
getwd()
dir()
datain1 <- readImage(as.character(this_group[1]))
library("EBimage")
library("EBImage")
datain1 <- readImage(as.character(this_group[1]))
datain2 <- readImage(as.character(this_group[2]))
projected <- datain1 + datain2
projected[projected >255] = 255
fn = this_group[1]
if (length(unlist(strsplit(this_group[1], split = ""))) >= 93){
fn <- paste(unlist(strsplit(this_group[1], split = ""))[1:93], sep = "", collapse = "")
#cant have 2 . in a row before png
if (tail(unlist(strsplit(fn,split = "")),1) == "."){
fn <- paste(unlist(strsplit(fn,split = ""))[1:length(unlist(strsplit(fn,split = ""))) - 1], sep = "", collapse = "")
}
}
file_out_loc <- paste(paste(out_loc,nm,j, sep = ""),"/",fn,".png", sep = "")
j
file_out_loc <- paste(paste(out_loc,j, sep = ""),"/",fn,".png", sep = "")
file_out_loc
writeImage(projected,file_out_loc)
fn
getwd()
out_loc
j
head(projected)
writeImage(projected,file_out_loc)
file_out_loc <- paste(paste(out_loc,j, sep = ""),"/","test",".png", sep = "")
writeImage(projected,file_out_loc)
getwd()
setwd("F:/Theo/full_backup_3_23_2021/Kaul_lab_work/bin_general/")
(paste(id_for_dir,"/",j, sep = ""))
id_for_dir
(paste(id_for_dir,j, sep = ""))
current_dir <- (paste(id_for_dir,j, sep = ""))
current_dir
img_file_names <- list.files(current_dir)
img_file_names
out_loc <- "test_area/Weka_Output_Projected/"
all_current_ID <- grep(u_img[i],big_df$img_ID)
paste0(current_dir,this_group[1])
datain1 <- readImage(paste0(current_dir,this_group[1]))
datain1 <- readImage(paste0(current_dir,"/",this_group[1]))
projected <- datain1 + datain2
projected[projected >255] = 255
this_group
length(unlist(strsplit(this_group[1], split = "")))
file_out_loc <- paste(paste(out_loc,j, sep = ""),"/",fn,".png", sep = "")
file_out_loc
writeImage(projected,file_out_loc)
for (j in inputdir_folders){
current_dir <- (paste(id_for_dir,j, sep = ""))
img_file_names <- list.files(current_dir)
out_loc <- "test_area/Weka_Output_Projected/"
for (i in 1: length(u_img)){
all_current_ID <- grep(u_img[i],big_df$img_ID)
this_group <- img_file_names[all_current_ID]
if (length(this_group) == 2){
datain1 <- readImage(paste0(current_dir,"/",this_group[1]))
datain2 <- readImage(paste0(current_dir,"/",this_group[2]))
projected <- datain1 + datain2
projected[projected >255] = 255
} else if (length(this_group) == 3){
readImage(paste0(current_dir,"/",this_group[1]))
readImage(paste0(current_dir,"/",this_group[2]))
readImage(paste0(current_dir,"/",this_group[3]))
projected <- datain1 + datain2 +datain3
projected[projected >255] = 255
}
##it turns out names get very long when working with image processing steps and you cant save a file with more than 97 charcters in the name
fn = this_group[1]
if (length(unlist(strsplit(this_group[1], split = ""))) >= 93){
fn <- paste(unlist(strsplit(this_group[1], split = ""))[1:93], sep = "", collapse = "")
#cant have 2 . in a row before png
if (tail(unlist(strsplit(fn,split = "")),1) == "."){
fn <- paste(unlist(strsplit(fn,split = ""))[1:length(unlist(strsplit(fn,split = ""))) - 1], sep = "", collapse = "")
}
}
file_out_loc <- paste(paste(out_loc,j, sep = ""),"/",fn,".png", sep = "")
writeImage(projected,file_out_loc)
# }else (print("we have a problem, ", as.character(this_group[1])," had neither 2 nor 3 images"))
#
}
}
class_compare <- NA
format(Sys.time(),"%D")
date <- format(Sys.time(),"%D-%H_%M")
date2 <- gsub("/", "_", date)
date2
OUTPUT_count <- "test_area/Weka_Output_Counted/"
class_list <- dir(OUTPUT_count)
class_compare <- NA
geno_file <- scan(file="test_area/Validation_Hand_Counts/roi_counts.csv", what='csv')
geno_file
geno_file <- scan(file="test_area/Validation_Hand_Counts/roi_counts.csv", what='character')
geno_file
geno_file <- read.csv("test_area/Validation_Hand_Counts/roi_counts.csv")
geno_file
geno_file <- scan(file="test_area/genotype.txt", what='character')
hand_ini <- read.csv("test_area/Validation_Hand_Counts/roi_counts.csv")
lv_h <- levels(as.factor(hand_ini$Label))
for (i in 1:length(lv_h)){
count_h[i]<- sum(hand_ini$Label == lv_h[i])
}
count_h <- NA
hand_final <- data.frame(cbind(lv_h, count_h))
hand_final$count_h <- as.numeric(hand_final$count_h)
hand_final
count_h <- NA
for (i in 1:length(lv_h)){
count_h[i]<- sum(hand_ini$Label == lv_h[i])
}
count_h
lv_h
hand_final <- data.frame(cbind(lv_h, count_h))
hand_final$count_h <- as.numeric(hand_final$count_h)
hand_final$count_h
OUTPUT_count
counted_folder_dir <- OUTPUT_count
class_list
for (f in 1:length(class_list)){
class_res_loc <- paste(counted_folder_dir,dir(OUTPUT_count)[f],"/Results.csv",sep = "")
class_results <- read.csv(class_res_loc)
class <- dir(OUTPUT_count)[f]
##if else loop for determining true positive, false positive and false negative cell counts
##from levels present in the classifier results output, this should be the same each time, BUT IT WoNT BE IF ONE IMAGE HAS NO CELL OBJECtS
#need to go into the counted folder and pull out all image names, meaning ignorming the Restuls.csv files. images from tru_count with be .png
folder_loc <- paste(counted_folder_dir,"/",dir(OUTPUT_count)[f], collapse = "", sep = "")
files <- list.files(path =  folder_loc, pattern = "\\.png$")
img_names <- files
#img_names <- levels(as.factor(class_results$Label))
#initialize data frame
final_blah <- data.frame(name = NA, tp = NA, fp = NA, fn= NA)
###### can use this to check size restriction
#print(min(class_results$Area))
##this next part does the collecting of tp, fp and fp and turns it into precision and recall
for (i in 1:length(img_names)) {
##this .png cames from saving by the tru_count imagej macro. needs to be removed to match the image names in the results file
current_img_plus_png <- img_names[i]
current_img_plus_png_split <- unlist(strsplit(current_img_plus_png, split = ""))
new_length <-length(current_img_plus_png_split) - 8 #this used to be 4, but now i have to remove "mask.png"
current_img <- paste(current_img_plus_png_split[1:new_length], sep = "", collapse = "")
#
dftc<- NA
dftc <- class_results[class_results$Label == current_img,]  ###pulls out just the rows in results with the image name of the current image
dftc
if (dim(dftc)[1] == 0){
#here is where we handle empty images
name <- img_names[i]
tp = 0
fp = 0
fn = as.numeric(hand_final$count_h[i])
this_row <- cbind(name,tp, fp, fn)
} else {
fp = 0
tp = 0
fn = 0
for (j in 1:length(dftc$points)) {
if (dftc$points[j] == 0) {
fp = fp +1
} #auto count objects with no hand markers
else if (dftc$points[j] == 1) {
tp = tp +1
} #auto count objects with exactly 1 marker
else {
tp = tp+1 #adds one tp and requisite number of fn for objects with multiple markers
fn = fn + dftc$points[j] - 1
}
}
#for each image add total number hand count - sum(dftc$points), the sum points must always be less than hand_final$count
## dtfc$points only counts the markers that fall within cell objects, hand_final$counts is the sum of all points in total.
#when this is not true(eg there are negative values) check the image names of the hand count!!
missed <- as.numeric(hand_final$count_h[i]) - sum(dftc$points)
fn <- fn + missed
name <- img_names[i]
this_row <- cbind(name, tp, fp, fn)
} #this is the closing bracket for if there were no cell objects so dftc is empty
final_blah <-rbind(final_blah, this_row)
}
# Set final_blah columns to be numeric
final_blah <- final_blah[-1,]
final_blah$tp <- as.numeric(final_blah$tp)
final_blah$fp <- as.numeric(final_blah$fp)
final_blah$fn <- as.numeric(final_blah$fn)
##need to calculate Precision and recall
tot_tp <- sum(as.numeric(final_blah$tp))
tot_fp <- sum(as.numeric(final_blah$fp))
tot_fn <- sum(as.numeric(final_blah$fn))
#precision is tp/(tp + fp)
prec <- tot_tp/(tot_tp + tot_fp)
#recall is tp/(tp + fn)
reca <- tot_tp/(tot_tp + tot_fn)
F1 <- 2*(prec*reca/(prec + reca))
prec <- round(prec, 4)
reca <- round(reca, 4)
F1 <- round(F1, 4)
print(paste(class," precision = ", prec ))
print(paste(class," recall = ", reca ))
print(paste(class," F1 = ", F1 ))
current_loc <- paste(counted_folder_dir,"/",class_list[f],sep = "")
file_out_name <- paste(current_loc,"/",class,"_Final.csv",sep = "")
#writes out the final file to save the output
write.csv(final_blah, file_out_name )
# #need to add geno again
# #going to do automatically this time
# a <- trim_names(final_blah$name)
# b <- sep_slidebook(a)
# c <- squish(b)
# length(c)
# d <- cbind(final_blah$name,c,b) ##specify: original file names, info columns, squished ID
# colnames(d) <- c("file_name", "img_ID", "a_num","S_num", "F_num")
# d <- data.frame(d)
#
# Why is this saved as a string theo?
#geno <- c("gp", "gp", "gp", "wt", "gp", "gp", "wt", "wt", "wt", "wt")
geno <- geno_file
final_blah$geno <- geno
final_blah$geno <- as.factor(final_blah$geno)
#####this makes the table comparing all classifiers
#precision and recall per image
prec2 <- final_blah$tp/(final_blah$tp + final_blah$fp)
reca2 <-final_blah$tp/(final_blah$tp + final_blah$fn)
F1_2 <- 2*(prec2*reca2/(prec2 + reca2))
final_blah$prec2 <- prec2
final_blah$reca2 <- reca2
final_blah$F1_2 <-  F1_2
p_g_tt <- t.test(final_blah$prec2 ~ final_blah$geno)
p_g_tt_p <- p_g_tt$p.value
r_g_tt <- t.test(final_blah$reca2 ~ final_blah$geno)
r_g_tt_p <- r_g_tt$p.value
F1_g_tt <- t.test(final_blah$F1_2 ~ final_blah$geno)
F1_g_tt_p <- F1_g_tt$p.value
mean_F1_gp <-(F1_g_tt$estimate[1])
mean_F1_wt <-(F1_g_tt$estimate[2])
p_g_tt_p <- p_g_tt$p.value
r_g_tt_p <- r_g_tt$p.value
stat_info <- cbind(class,prec,reca,F1,F1_g_tt_p, mean_F1_gp,mean_F1_wt, p_g_tt_p,r_g_tt_p, class)#F1_s_tt_p,mean_F1_m, mean_F1_f
class_compare <- rbind(class_compare, stat_info)
}#this is the bottom bracket of iterating through all the class folders
f=1
class_res_loc <- paste(counted_folder_dir,dir(OUTPUT_count)[f],"/Results.csv",sep = "")
class_results <- read.csv(class_res_loc)
class <- dir(OUTPUT_count)[f]
class_results
folder_loc <- paste(counted_folder_dir,"/",dir(OUTPUT_count)[f], collapse = "", sep = "")
files <- list.files(path =  folder_loc, pattern = "\\.png$")
img_names <- files
img_names
img_info <- data.frame(name = NA, tp = NA, fp = NA, fn= NA)
i = 1
current_img_plus_png <- img_names[i]
current_img_plus_png_split <- unlist(strsplit(current_img_plus_png, split = ""))
new_length <-length(current_img_plus_png_split) - 8 #this used to be 4, but now i have to remove "mask.png"
current_img <- paste(current_img_plus_png_split[1:new_length], sep = "", collapse = "")
dftc<- NA
dftc <- class_results[class_results$Label == current_img,]  ###pulls out just the rows in results with the image name of the current image
dftc
current_img_plus_png
current_img
class_results$Label
img_names
dftc<- NA
dftc <- class_results[class_results$Label == img_names[i],]  ###pulls out just the rows in results with the image name of the current image
dftc
class_results
dftc<- NA
dftc <- class_results[class_results$Label == img_names[i],]  ###pulls out just the rows in results with the image name of the current image
dftc
if (dim(dftc)[1] == 0){
#here is where we handle empty images
name <- img_names[i]
tp = 0
fp = 0
fn = as.numeric(hand_final$count_h[i])
this_row <- cbind(name,tp, fp, fn)
} else {
fp = 0
tp = 0
fn = 0
for (j in 1:length(dftc$points)) {
if (dftc$points[j] == 0) {
fp = fp +1
} #auto count objects with no hand markers
else if (dftc$points[j] == 1) {
tp = tp +1
} #auto count objects with exactly 1 marker
else {
tp = tp+1 #adds one tp and requisite number of fn for objects with multiple markers
fn = fn + dftc$points[j] - 1
}
}
#for each image add total number hand count - sum(dftc$points), the sum points must always be less than hand_final$count
## dtfc$points only counts the markers that fall within cell objects, hand_final$counts is the sum of all points in total.
#when this is not true(eg there are negative values) check the image names of the hand count!!
missed <- as.numeric(hand_final$count_h[i]) - sum(dftc$points)
fn <- fn + missed
name <- img_names[i]
this_row <- cbind(name, tp, fp, fn)
} #this is the closing bracket for if there were no cell objects so dftc is empty
img_info <-rbind(img_info, this_row)
img_info
img_info <- img_info[-1,]
img_info$tp <- as.numeric(img_info$tp)
img_info$fp <- as.numeric(img_info$fp)
tot_tp <- sum(as.numeric(img_info$tp))
img_info$fn <- as.numeric(img_info$fn)
tot_fp <- sum(as.numeric(img_info$fp))
tot_fn <- sum(as.numeric(img_info$fn))
prec <- tot_tp/(tot_tp + tot_fp)
reca <- tot_tp/(tot_tp + tot_fn)
F1 <- 2*(prec*reca/(prec + reca))
prec <- round(prec, 4)
reca <- round(reca, 4)
F1 <- round(F1, 4)
print(paste(class," precision = ", prec ))
print(paste(class," recall = ", reca ))
print(paste(class," F1 = ", F1 ))
current_loc <- paste(counted_folder_dir,"/",class_list[f],sep = "")
current_loc
file_out_name <- paste(current_loc,"/",class,"_Final.csv",sep = "")
file_out_name
write.csv(img_info, file_out_name )
geno <- geno_file
img_info$geno <- geno
img_info$geno <- as.factor(img_info$geno)
geno
#precision and recall per image
prec2 <- img_info$tp/(img_info$tp + img_info$fp)
reca2 <-img_info$tp/(img_info$tp + img_info$fn)
F1_2 <- 2*(prec2*reca2/(prec2 + reca2))
img_info$prec2 <- prec2
img_info$reca2 <- reca2
img_info$F1_2 <-  F1_2
p_g_tt <- t.test(img_info$prec2 ~ img_info$geno)
p_g_tt_p <- p_g_tt$p.value
